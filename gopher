#!/usr/bin/env bash

# Author:  Stanislav <git.io/monesonn>
# Description: Shell script for fetching and updating Golang.
# Licence: ISC
# Credit:  https://gist.github.com/nikhita/432436d570b89cab172dcf2894465753

set -euo pipefail
IFS=$'\n\t'

_version="1.1.1"
_shell=`getent passwd $LOGNAME | cut -d: -f7 | awk -F "/" '{print $NF}'`
_destination="$HOME/.gopher"

fuzzy=false

blue="\033[34m"
yellow="\033[1;33m"
red="\033[0;31m"
noc="\033[0;m"

banner () {
cat << "EOF"
             ,_---~~~~~----._
      _,,_,*^____      _____``*g*\"*,
     / __/ /'     ^.  /      \ ^@q   f
    [  @f | @))    |  | @))   l  0 _/
     \`/   \~____ / __ \_____/    \
      |           _l__l_           I
      }          [______]           I
      ]            | | |            |
      ]             ~_~             |   __
     ___ ____  ___  / /  ___ ____  ___ / /
    / _ `/ _ \/ _ \/ _ \/ -_) __/ (_-</ _ \
    \_, /\___/ .__/_//_/\__/_/ (_)___/_//_/
   /___/    /_/

EOF
}

help () {

printf %b\\n\\n "${blue}`basename $0` v.$_version ${noc}"
cat << EOF
Description:
    Shell script for fetching and updating Golang.

Usage:
    `basename $0` [option]

Options:
    --go       go           Startpoint
    --check    check        Check out new releases
    --fuzzy    fuzzy        Same as above option, but uses fzf for searching specific versions
                            Use one of them

    --version  version      Show current Golang and script version
    --help     help         Show help text

Examples:
    gopher go
    gopher fuzzy
    gopher go='specific version' like 1.16.5

EOF
}

err () {
    printf %b\\n "${red}[!] ${yellow}$@${noc}"
}

gopher_say () {
    printf %b\\n "${blue}[gopher]${noc} $1"
}

gopher_say_sleepy () {
    printf %b\\n "${blue}[gopher]${noc} $1"
    sleep 1
}

version () {
    [[ `command -v go` ]] && (
        gopher_say "script version $_version"
        gopher_say `go version`
        ) || (
        gopher_say $_version
        )
}

check () {
    release=`curl --silent https://golang.org/doc/devel/release | grep -Eo 'go[0-9]+(\.[0-9]+)+' | sort -V | uniq | tail -1`

    gopher_say "$release is available."

   [[ `command -v go` ]] && \
        current_version=`go version | grep -Eo 'go[0-9]+(\.[0-9]+)+'` && \
        [[ $current_version == $release ]] && { gopher_say_sleepy "All is up to date."; exit 0; }
}

find () {
    release=`curl --silent https://golang.org/doc/devel/release | grep -Eo "go$1" | sort -V | uniq `

    gopher_say "$release is available."
}

go! () {
    gopher_say_sleepy "Starting."

    [ ${#} -eq 0 ] && release_pattern='go[0-9]+(\.[0-9]+)+' || release_pattern="go$1"

    [ $fuzzy = true ] && \
        release=`curl --silent https://golang.org/doc/devel/release | grep -Eo $release_pattern | sort -rV | uniq | fzf` || \
        release=`curl --silent https://golang.org/doc/devel/release | grep -Eo $release_pattern | sort -rV | uniq | head -1`

    os=`uname -s | tr '[:upper:]' '[:lower:]'`
    arch=`case "$(uname -m)" in i*) printf '386' ;; x*) printf 'amd64' ;; *) printf 'armv61'; esac`

    [ `command -v go` ] && \
        current_version=`go version | grep -Eo 'go[0-9]+(\.[0-9]+)+'` && \
        [[ $current_version == $release ]] && { gopher_say_sleepy "All is up to date."; exit 0; }

    gopher_say_sleepy "$release $os/$arch will installed. Is it correct? [y/n]"
    read -n 1 -s -e -p '[gopher] ' answer

    if [ $answer != "${answer#[Yy]}" ]; then
        _temp=`mktemp -d` && gopher_say_sleepy "temp => $_temp"
        [ -d $_destination/go ] || mkdir -p $_destination/go && gopher_say_sleepy "$_destination/go is created."

        gopher_say_sleepy "$release.$os-$arch is installing."
        gopher_say_sleepy "Progress:"
        curl -# https://storage.googleapis.com/golang/$release.$os-$arch.tar.gz -o $_temp/$release.$os-$arch.tar.gz

        gopher_say_sleepy "Extracting $_temp/$release.$os-$arch => $_destination/go"
        tar -C $_destination/go --strip-components 1 -xzf $_temp/$release.$os-$arch.tar.gz
        gopher_say_sleepy "Extracted."

        gopher_say_sleepy "$release is installed."

         rm -f $_temp/$release.$os-$arch.tar.gz && gopher_say_sleepy "$_temp/$release.$os-$arch.tar.gz is deleted."
     else
         gopher_say_sleepy "See ya!"
         exit 0
     fi

     if [[ ":$PATH:" != *":$_destination/go/bin:"* ]]; then
         gopher_say_sleepy "Adding Golang to PATH."
         if [[ $_shell = "zsh" ]]; then
             profile=".zshenv"
         elif [[ $_shell = "bash" ]]; then
             profile=".bash_profile"
         else
             profile=".profile"
         fi

       [ -a $HOME/$profile ] || touch $PWD/$profile

       gopher_say_sleepy "Default shell: $_shell"

       printf %s\\n "export GOPHER_PATH=$_destination" >> $HOME/$profile
       printf %s\\n 'export GOPATH=$HOME/.go' >> $HOME/$profile
       printf %s\\n 'export GOBIN="$GOPATH/bin"' >> $HOME/$profile
       printf %s\\n 'export PATH=${PATH}:${GOPHER_PATH}/go/bin:$GOPATH/bin' >> $HOME/$profile

       gopher_say_sleepy "Added to $profile"
       . $HOME/$profile
       gopher_say_sleepy "source ~/$profile"
    fi

    gopher_say_sleepy "Have fun!"
}

__main__ () {
    while [ "$#" -gt 0 ]; do
    argument="$1"
    case $argument in
        --go | go)
            go!
            shift
            exit 0 ;;
        --go=* | go=*)
            go! "${argument#*=}"
            shift
            exit 0 ;;
        --fuzzy | fuzzy)
            fuzzy=true
            go!
            shift
            exit 0 ;;
        --check | check )
            check
            shift
            exit 0 ;;
        --version | version)
            version
            shift
            exit 0 ;;
        --help | help)
            help
            shift
            exit 0 ;;
        * | -* | --*)
            err "No such option: $argument.\nType `basename $0` [--help|help] to see a list of all options."
            exit 1 ;;
    esac
  done
  err "Something went wrong...";
}

[ ${#} -eq 0 ] && { banner; help; } || __main__ "$@"
