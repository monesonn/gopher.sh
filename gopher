#!/usr/bin/env bash

# Author:  Stanislav <git.io/monesonn>
# Description: Shell script for fetching and updating Golang.
# Licence: ISC
# Credit:  https://gist.github.com/nikhita/432436d570b89cab172dcf2894465753

set -euo pipefail
IFS=$'\n\t'

_version="1.0.3"
_shell=`getent passwd $LOGNAME | cut -d: -f7 | awk -F "/" '{print $NF}'`

blue_color="\033[34m"
yellow_color="\033[1;33m"
red_color="\033[0;31m"
no_color="\033[0;m"

banner () {
cat << "EOF"
             ,_---~~~~~----._
      _,,_,*^____      _____``*g*\"*,
     / __/ /'     ^.  /      \ ^@q   f
    [  @f | @))    |  | @))   l  0 _/
     \`/   \~____ / __ \_____/    \
      |           _l__l_           I
      }          [______]           I
      ]            | | |            |
      ]             ~_~             |   __
     ___ ____  ___  / /  ___ ____  ___ / /
    / _ `/ _ \/ _ \/ _ \/ -_) __/ (_-</ _ \
    \_, /\___/ .__/_//_/\__/_/ (_)___/_//_/
   /___/    /_/

EOF
}

help () {

printf %b\\n\\n "${blue_color}`basename $0` v.$_version ${no_color}"
cat << EOF
Description:
    Shell script for fetching and updating Golang.

Usage:
    `basename $0` [options]

Options:
    --go       go           Start script

    --version  version      Show current Golang version
    --help     help         Show help text
EOF
}

err () {
    printf %b\\n "${red_color}[!] ${yellow_color}$@${no_color}"
}

gopher_say () {
    printf %b\\n "${blue_color}[gopher]${no_color} $1"
}

gopher_say_sleepy () {
    printf %b\\n "${blue_color}[gopher]${no_color} $1"
    sleep 1
}

version() {
    [[ `command -v go` ]] && (
        gopher_say "script version $_version"
        gopher_say `go version`
        ) || (
        gopher_say $_version
        )
}

go! () {
    gopher_say_sleepy "Starting."

    release=`curl --silent https://golang.org/doc/devel/release | grep -Eo 'go[0-9]+(\.[0-9]+)+' | sort -V | uniq | tail -1`
    os=`uname -s | tr '[:upper:]' '[:lower:]'`
    arch=`case "$(uname -m)" in i*) printf '386' ;; x*) printf 'amd64' ;; *) printf 'armv61'; esac`

    [[ `command -v go` ]] && \
        current_version=`go version | grep -Eo 'go[0-9]+(\.[0-9]+)+'` && \
        [[ $current_version == $release ]] && { gopher_say_sleepy "All is up to date."; exit 0; }

    gopher_say_sleepy "$release $os/$arch will installed. Is it correct?"
    read -n 1 -s -e -p '[y/n]> ' answer

    [ $answer != "${answer#[Yy]}" ] && (
            [ -d /usr/local/go ] || sudo mkdir /usr/local/go && gopher_say_sleepy "/usr/local/go is created";
            curl --silent https://storage.googleapis.com/golang/$release.$os-$arch.tar.gz | sudo tar -vxz --strip-components 1 -C /usr/local/go
    ) || exit 0

    gopher_say_sleepy "$release is installed."

    if [[ ":$PATH:" != *":/usr/local/go/bin:"* ]]; then
       gopher_say_sleepy "Adding Golang to PATH."
       if [[ $_shell = "zsh" ]]; then
           profile=".zshenv"
       elif [[ $_shell = "bash" ]]; then
           profile=".bash_profile"
       else
           profile=".profile"
       fi

      [ -a $HOME/$profile ] || touch $PWD/$profile

       gopher_say_sleepy "Default shell: $_shell"
       printf %s\\n 'export GOPATH=$HOME/.go' >> $HOME/$profile
       printf %s\\n 'export GOBIN="$GOPATH/bin"' >> $HOME/$profile
       printf %s\\n 'export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin' >> $HOME/$profile
       gopher_say_sleepy "Added to $profile"
       . $HOME/$profile
       gopher_say_sleepy "source ~/$profile"
    fi

    gopher_say_sleepy "Have fun!"
}

__main__ () {
    while [ "$#" -gt 0 ]; do
    argument="$1"
    case $argument in
        --go | go)
            go!
            shift
            exit 0 ;;
        --version | version)
            version
            shift
            exit 0 ;;
        --help | help)
            help
            shift
            exit 0 ;;
        * | -* | --*)
            err "No such option: $argument.\nType `basename $0` [--help|help] to see a list of all options."
            exit 1 ;;
    esac
  done
  err "Something went wrong...";
}

[ ${#} -eq 0 ] && { banner; help; } || __main__ "$@"
